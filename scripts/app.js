(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _statesBootJs = require("./states/Boot.js");

var _statesBootJs2 = _interopRequireDefault(_statesBootJs);

var _statesPreloadJs = require("./states/Preload.js");

var _statesPreloadJs2 = _interopRequireDefault(_statesPreloadJs);

var _statesGameJs = require("./states/Game.js");

var _statesGameJs2 = _interopRequireDefault(_statesGameJs);

var _statesStartScreenJs = require("./states/StartScreen.js");

var _statesStartScreenJs2 = _interopRequireDefault(_statesStartScreenJs);

var _statesGameOverJs = require("./states/GameOver.js");

var _statesGameOverJs2 = _interopRequireDefault(_statesGameOverJs);

var game = undefined;

window.onload = function () {
  game = new Phaser.Game(800, 600, Phaser.AUTO, 'game');
  game.state.add('boot', _statesBootJs2["default"]);
  game.state.add('preload', _statesPreloadJs2["default"]);
  game.state.add('game', _statesGameJs2["default"]);
  game.state.add('gameOver', _statesGameOverJs2["default"]);
  game.state.add('startScreen', _statesStartScreenJs2["default"]);
  game.state.start('boot');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6L1VzZXJzL0FudG9uL0Rlc2t0b3Avc2hvb3Rlci9zcmMvYXBwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7NEJBRWlCLGtCQUFrQjs7OzsrQkFDZixxQkFBcUI7Ozs7NEJBQ3hCLGtCQUFrQjs7OzttQ0FFWCx5QkFBeUI7Ozs7Z0NBQzVCLHNCQUFzQjs7OztBQVAzQyxJQUFJLElBQUksWUFBQSxDQUFDOztBQVNULE1BQU0sQ0FBQyxNQUFNLEdBQUcsWUFBWTtBQUMxQixNQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN0RCxNQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLDRCQUFPLENBQUM7QUFDN0IsTUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUywrQkFBVSxDQUFDO0FBQ25DLE1BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sNEJBQU8sQ0FBQztBQUM3QixNQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLGdDQUFXLENBQUM7QUFDckMsTUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxtQ0FBYyxDQUFDO0FBQzNDLE1BQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQzFCLENBQUMiLCJmaWxlIjoiQzovVXNlcnMvQW50b24vRGVza3RvcC9zaG9vdGVyL3NyYy9hcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgZ2FtZTtcclxuXHJcbmltcG9ydCBCb290IGZyb20gXCIuL3N0YXRlcy9Cb290LmpzXCI7XHJcbmltcG9ydCBQcmVsb2FkIGZyb20gXCIuL3N0YXRlcy9QcmVsb2FkLmpzXCI7XHJcbmltcG9ydCBHYW1lIGZyb20gXCIuL3N0YXRlcy9HYW1lLmpzXCI7XHJcblxyXG5pbXBvcnQgU3RhcnRTY3JlZW4gZnJvbSBcIi4vc3RhdGVzL1N0YXJ0U2NyZWVuLmpzXCI7XHJcbmltcG9ydCBHYW1lT3ZlciBmcm9tIFwiLi9zdGF0ZXMvR2FtZU92ZXIuanNcIjtcclxuXHJcbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgZ2FtZSA9IG5ldyBQaGFzZXIuR2FtZSg4MDAsIDYwMCwgUGhhc2VyLkFVVE8sICdnYW1lJyk7XHJcbiAgZ2FtZS5zdGF0ZS5hZGQoJ2Jvb3QnLCBCb290KTtcclxuICBnYW1lLnN0YXRlLmFkZCgncHJlbG9hZCcsIFByZWxvYWQpO1xyXG4gIGdhbWUuc3RhdGUuYWRkKCdnYW1lJywgR2FtZSk7XHJcbiAgZ2FtZS5zdGF0ZS5hZGQoJ2dhbWVPdmVyJywgR2FtZU92ZXIpO1xyXG4gIGdhbWUuc3RhdGUuYWRkKCdzdGFydFNjcmVlbicsIFN0YXJ0U2NyZWVuKTtcclxuICBnYW1lLnN0YXRlLnN0YXJ0KCdib290Jyk7XHJcbn07Il19
},{"./states/Boot.js":8,"./states/Game.js":9,"./states/GameOver.js":10,"./states/Preload.js":11,"./states/StartScreen.js":12}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Bird = (function (_Phaser$Sprite) {
	_inherits(Bird, _Phaser$Sprite);

	function Bird(game, x, y, bulletLayer, frame) {
		_classCallCheck(this, Bird);

		_get(Object.getPrototypeOf(Bird.prototype), "constructor", this).call(this, game, x, y, 'bird', frame);

		this.game.physics.enable(this, Phaser.Physics.ARCADE);

		this.bounceTick = Math.random() * 2;

		this.bulletLayer = bulletLayer;

		this.outOfBoundsKill = true;

		this.animations.add("fly");
		this.animations.play("fly", 14, true);

		this.anchor.setTo(.5, .5);

		if (Math.random() <= .5) {
			this.scale.setTo(-.5, .5);
			this.body.x + 183;
			this.body.velocity.x = -175;
		} else {
			this.scale.setTo(.5, .5);
			this.body.velocity.x = 175;
		}
	}

	_createClass(Bird, [{
		key: "update",
		value: function update() {
			this.bounceTick += .02;
			this.y += Math.sin(this.bounceTick) * 2;
		}
	}]);

	return Bird;
})(Phaser.Sprite);

exports["default"] = Bird;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6L1VzZXJzL0FudG9uL0Rlc2t0b3Avc2hvb3Rlci9zcmMvcHJlZmFicy9CaXJkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0lBQXFCLElBQUk7V0FBSixJQUFJOztBQUViLFVBRlMsSUFBSSxDQUVaLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUU7d0JBRnhCLElBQUk7O0FBR3ZCLDZCQUhtQixJQUFJLDZDQUdqQixJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFOztBQUVqQyxNQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRXRELE1BQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQzs7QUFFcEMsTUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7O0FBRS9CLE1BQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDOztBQUU1QixNQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQixNQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDOztBQUV0QyxNQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7O0FBRTFCLE1BQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUN4QixPQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMxQixPQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDbEIsT0FBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0dBQzVCLE1BQ0k7QUFDSixPQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDekIsT0FBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztHQUMzQjtFQUVEOztjQTVCbUIsSUFBSTs7U0E4QmxCLGtCQUFHO0FBQ1IsT0FBSSxDQUFDLFVBQVUsSUFBSSxHQUFHLENBQUM7QUFDdkIsT0FBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDeEM7OztRQWpDbUIsSUFBSTtHQUFTLE1BQU0sQ0FBQyxNQUFNOztxQkFBMUIsSUFBSSIsImZpbGUiOiJDOi9Vc2Vycy9BbnRvbi9EZXNrdG9wL3Nob290ZXIvc3JjL3ByZWZhYnMvQmlyZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEJpcmQgZXh0ZW5kcyBQaGFzZXIuU3ByaXRlIHtcclxuXHJcblx0Y29uc3RydWN0b3IoZ2FtZSwgeCwgeSwgYnVsbGV0TGF5ZXIsIGZyYW1lKSB7XHJcblx0XHRzdXBlcihnYW1lLCB4LCB5LCAnYmlyZCcsIGZyYW1lKTtcclxuXHJcblx0XHR0aGlzLmdhbWUucGh5c2ljcy5lbmFibGUodGhpcywgUGhhc2VyLlBoeXNpY3MuQVJDQURFKTtcclxuXHJcblx0XHR0aGlzLmJvdW5jZVRpY2sgPSBNYXRoLnJhbmRvbSgpICogMjtcclxuXHJcblx0XHR0aGlzLmJ1bGxldExheWVyID0gYnVsbGV0TGF5ZXI7XHJcblxyXG5cdFx0dGhpcy5vdXRPZkJvdW5kc0tpbGwgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuYW5pbWF0aW9ucy5hZGQoXCJmbHlcIik7XHJcblx0XHR0aGlzLmFuaW1hdGlvbnMucGxheShcImZseVwiLCAxNCwgdHJ1ZSk7XHJcblxyXG5cdFx0dGhpcy5hbmNob3Iuc2V0VG8oLjUsIC41KTtcclxuXHRcdFxyXG5cdFx0aWYgKE1hdGgucmFuZG9tKCkgPD0gLjUpIHtcclxuXHRcdFx0dGhpcy5zY2FsZS5zZXRUbygtLjUsIC41KTtcclxuXHRcdFx0dGhpcy5ib2R5LnggKyAxODM7XHJcblx0XHRcdHRoaXMuYm9keS52ZWxvY2l0eS54ID0gLTE3NTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHR0aGlzLnNjYWxlLnNldFRvKC41LCAuNSk7XHJcblx0XHRcdHRoaXMuYm9keS52ZWxvY2l0eS54ID0gMTc1O1xyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHVwZGF0ZSgpIHtcclxuXHRcdHRoaXMuYm91bmNlVGljayArPSAuMDI7XHJcblx0XHR0aGlzLnkgKz0gTWF0aC5zaW4odGhpcy5ib3VuY2VUaWNrKSAqIDI7XHJcblx0fVxyXG59Il19
},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Boulder = (function (_Phaser$Sprite) {
    _inherits(Boulder, _Phaser$Sprite);

    function Boulder(game, x, y, frame) {
        _classCallCheck(this, Boulder);

        _get(Object.getPrototypeOf(Boulder.prototype), 'constructor', this).call(this, game, x, y, 'boulder', frame);

        this.game.physics.enable(this, Phaser.Physics.ARCADE);

        this.outOfBoundsKill = true;
        this.scale.setTo(.5, .5);
        this.anchor.setTo(.5, .5);

        this.rotationSpeed = 4;
        this.fallSpeed = 3;
    }

    _createClass(Boulder, [{
        key: 'update',
        value: function update() {
            this.angle += this.rotationSpeed;
            this.body.velocity.y += this.fallSpeed;
        }
    }]);

    return Boulder;
})(Phaser.Sprite);

exports['default'] = Boulder;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6L1VzZXJzL0FudG9uL0Rlc2t0b3Avc2hvb3Rlci9zcmMvcHJlZmFicy9Cb3VsZGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0lBQXFCLE9BQU87Y0FBUCxPQUFPOztBQUNiLGFBRE0sT0FBTyxDQUNaLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRTs4QkFEZCxPQUFPOztBQUVwQixtQ0FGYSxPQUFPLDZDQUVkLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUU7O0FBRXBDLFlBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFdEQsWUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7QUFDNUIsWUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3pCLFlBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQzs7QUFFMUIsWUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUM7QUFDdkIsWUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7S0FDdEI7O2lCQVpnQixPQUFPOztlQWNsQixrQkFBRztBQUNMLGdCQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUM7QUFDakMsZ0JBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDO1NBQzFDOzs7V0FqQmdCLE9BQU87R0FBUyxNQUFNLENBQUMsTUFBTTs7cUJBQTdCLE9BQU8iLCJmaWxlIjoiQzovVXNlcnMvQW50b24vRGVza3RvcC9zaG9vdGVyL3NyYy9wcmVmYWJzL0JvdWxkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBCb3VsZGVyIGV4dGVuZHMgUGhhc2VyLlNwcml0ZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCB4LCB5LCBmcmFtZSkge1xyXG4gICAgICAgIHN1cGVyKGdhbWUsIHgsIHksICdib3VsZGVyJywgZnJhbWUpO1xyXG5cclxuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5lbmFibGUodGhpcywgUGhhc2VyLlBoeXNpY3MuQVJDQURFKTtcclxuXHJcbiAgICAgICAgdGhpcy5vdXRPZkJvdW5kc0tpbGwgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuc2NhbGUuc2V0VG8oLjUsIC41KTtcclxuICAgICAgICB0aGlzLmFuY2hvci5zZXRUbyguNSwgLjUpO1xyXG5cclxuICAgICAgICB0aGlzLnJvdGF0aW9uU3BlZWQgPSA0O1xyXG4gICAgICAgIHRoaXMuZmFsbFNwZWVkID0gMztcclxuICAgIH1cclxuICAgIFxyXG4gICAgdXBkYXRlKCkge1xyXG4gICAgICAgIHRoaXMuYW5nbGUgKz0gdGhpcy5yb3RhdGlvblNwZWVkO1xyXG4gICAgICAgIHRoaXMuYm9keS52ZWxvY2l0eS55ICs9IHRoaXMuZmFsbFNwZWVkO1xyXG4gICAgfVxyXG5cclxufSJdfQ==
},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Menu = (function (_Phaser$Group) {
    _inherits(Menu, _Phaser$Group);

    function Menu() {
        _classCallCheck(this, Menu);

        _get(Object.getPrototypeOf(Menu.prototype), "constructor", this).apply(this, arguments);
    }

    _createClass(Menu, [{
        key: "create",
        value: function create(game) {
            // super(game);

            /*
            this.button = this.game.add.button(this.game.width / 2 - 50, this.game.height / 3 - 30, 'startButton', () => {
                this.game.state.start('game');
            }, this, 1, 1, 1);
            */
        }
    }]);

    return Menu;
})(Phaser.Group);

exports["default"] = Menu;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6L1VzZXJzL0FudG9uL0Rlc2t0b3Avc2hvb3Rlci9zcmMvcHJlZmFicy9NZW51LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0lBQ3FCLElBQUk7Y0FBSixJQUFJOzthQUFKLElBQUk7OEJBQUosSUFBSTs7bUNBQUosSUFBSTs7O2lCQUFKLElBQUk7O2VBRWYsZ0JBQUMsSUFBSSxFQUFFOzs7Ozs7OztTQVFaOzs7V0FWZ0IsSUFBSTtHQUFTLE1BQU0sQ0FBQyxLQUFLOztxQkFBekIsSUFBSSIsImZpbGUiOiJDOi9Vc2Vycy9BbnRvbi9EZXNrdG9wL3Nob290ZXIvc3JjL3ByZWZhYnMvTWVudS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZW51IGV4dGVuZHMgUGhhc2VyLkdyb3VwIHtcclxuXHJcbiAgICBjcmVhdGUoZ2FtZSkge1xyXG4gICAgICAgIC8vIHN1cGVyKGdhbWUpO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgIHRoaXMuYnV0dG9uID0gdGhpcy5nYW1lLmFkZC5idXR0b24odGhpcy5nYW1lLndpZHRoIC8gMiAtIDUwLCB0aGlzLmdhbWUuaGVpZ2h0IC8gMyAtIDMwLCAnc3RhcnRCdXR0b24nLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnZ2FtZScpO1xyXG4gICAgICAgIH0sIHRoaXMsIDEsIDEsIDEpO1xyXG4gICAgICAgICovXHJcbiAgICB9XHJcbn0iXX0=
},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NumberBox = (function (_Phaser$Group) {
    _inherits(NumberBox, _Phaser$Group);

    function NumberBox(game, bgasset, val, parent) {
        _classCallCheck(this, NumberBox);

        _get(Object.getPrototypeOf(NumberBox.prototype), "constructor", this).call(this, game, parent);
        this.create(0, 0, bgasset);

        var style = { font: "30px Arial", align: "center", fill: "#fff" };
        this.txtValue = new Phaser.Text(this.game, 55, 55, val.toString(), style);
        this.txtValue.anchor.setTo(.5, .5);
        this.add(this.txtValue);
    }

    _createClass(NumberBox, [{
        key: "setValue",
        value: function setValue(val) {
            this.txtValue.text = val.toString();
        }
    }]);

    return NumberBox;
})(Phaser.Group);

exports["default"] = NumberBox;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6L1VzZXJzL0FudG9uL0Rlc2t0b3Avc2hvb3Rlci9zcmMvcHJlZmFicy9OdW1iZXJCb3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7SUFDcUIsU0FBUztjQUFULFNBQVM7O0FBRWYsYUFGTSxTQUFTLENBRWQsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFOzhCQUZ2QixTQUFTOztBQUd0QixtQ0FIYSxTQUFTLDZDQUdoQixJQUFJLEVBQUUsTUFBTSxFQUFFO0FBQ3BCLFlBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQzs7QUFFM0IsWUFBSSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQ2xFLFlBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsUUFBUSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDMUUsWUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNuQyxZQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUMzQjs7aUJBVmdCLFNBQVM7O2VBWWxCLGtCQUFDLEdBQUcsRUFBRTtBQUNWLGdCQUFJLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDdkM7OztXQWRnQixTQUFTO0dBQVMsTUFBTSxDQUFDLEtBQUs7O3FCQUE5QixTQUFTIiwiZmlsZSI6IkM6L1VzZXJzL0FudG9uL0Rlc2t0b3Avc2hvb3Rlci9zcmMvcHJlZmFicy9OdW1iZXJCb3guanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTnVtYmVyQm94IGV4dGVuZHMgUGhhc2VyLkdyb3VwIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBiZ2Fzc2V0LCB2YWwsIHBhcmVudCkge1xyXG4gICAgICAgIHN1cGVyKGdhbWUsIHBhcmVudCk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGUoMCwgMCwgYmdhc3NldCk7XHJcblxyXG4gICAgICAgIGxldCBzdHlsZSA9IHsgZm9udDogXCIzMHB4IEFyaWFsXCIsIGFsaWduOiBcImNlbnRlclwiLCBmaWxsOiBcIiNmZmZcIiB9O1xyXG4gICAgICAgIHRoaXMudHh0VmFsdWUgPSBuZXcgUGhhc2VyLlRleHQodGhpcy5nYW1lLCA1NSwgNTUsIHZhbC50b1N0cmluZygpLCBzdHlsZSk7XHJcbiAgICAgICAgdGhpcy50eHRWYWx1ZS5hbmNob3Iuc2V0VG8oLjUsIC41KTtcclxuICAgICAgICB0aGlzLmFkZCh0aGlzLnR4dFZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRWYWx1ZSh2YWwpIHtcclxuICAgICAgICB0aGlzLnR4dFZhbHVlLnRleHQgPSB2YWwudG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbn0iXX0=
},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Player = (function (_Phaser$Sprite) {
  _inherits(Player, _Phaser$Sprite);

  function Player(game, x, y, bullets) {
    _classCallCheck(this, Player);

    _get(Object.getPrototypeOf(Player.prototype), 'constructor', this).call(this, game, x, y, 'heroship', 0);

    this.game.physics.enable(this, Phaser.Physics.ARCADE);
    this.body.drag.x = 150;
    this.body.drag.y = 150;
    this.body.collideWorldBounds = true;

    this.speed = 200;
    this.bulletSpeed = 1500;
    this.anchor.setTo(.5, .5);

    this.bullets = bullets;
    this.bulletGate = 0;
    this.shotInterval = 500;

    this.W_Button = this.game.input.keyboard.addKey(Phaser.Keyboard.W);
    this.A_Button = this.game.input.keyboard.addKey(Phaser.Keyboard.A);
    this.S_Button = this.game.input.keyboard.addKey(Phaser.Keyboard.S);
    this.D_Button = this.game.input.keyboard.addKey(Phaser.Keyboard.D);

    this.game.load.audio('pew', 'assets/audio/pew.mp3');
    this.pew = this.game.add.audio('pew');
    this.pew.volume = .05;

    this.health = { current: 1, max: 1 };
  }

  _createClass(Player, [{
    key: 'update',
    value: function update() {

      this.rotation = this.game.physics.arcade.angleToPointer(this);

      if (this.W_Button.isDown) {
        this.body.velocity.y = -this.speed;
      }
      if (this.A_Button.isDown) {
        this.body.velocity.x = -this.speed;
      }
      if (this.S_Button.isDown) {
        this.body.velocity.y = this.speed;
      }
      if (this.D_Button.isDown) {
        this.body.velocity.x = this.speed;
      }
      if (this.game.input.activePointer.isDown) {
        this.fire();
      }
    }
  }, {
    key: 'fire',
    value: function fire() {
      if (this.game.time.now > this.bulletGate) {

        var bullet = this.bullets.getFirstDead();

        if (bullet) {
          bullet.x = this.x;
          bullet.y = this.y;
          bullet.revive();
          this.pew.play();
        } else {
          bullet = this.bullets.create(this.x, this.y, "playerBullet");
          this.game.physics.enable(bullet, Phaser.Physics.ARCADE);
          bullet.outOfBoundsKill = true;
          bullet.checkWorldBounds = true;
          this.pew.play();
        }
        this.game.physics.arcade.moveToPointer(bullet, this.bulletSpeed);

        this.bulletGate = this.game.time.now + this.shotInterval;
      }
    }
  }, {
    key: 'damage',
    value: function damage(amt) {
      this.health.current -= amt;
    }
  }]);

  return Player;
})(Phaser.Sprite);

exports['default'] = Player;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6L1VzZXJzL0FudG9uL0Rlc2t0b3Avc2hvb3Rlci9zcmMvcHJlZmFicy9QbGF5ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7SUFBcUIsTUFBTTtZQUFOLE1BQU07O0FBRWQsV0FGUSxNQUFNLENBRWIsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFOzBCQUZkLE1BQU07O0FBSXZCLCtCQUppQixNQUFNLDZDQUlqQixJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFOztBQUVqQyxRQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdEQsUUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUN2QixRQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ3ZCLFFBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDOztBQUVwQyxRQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUNqQixRQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztBQUN4QixRQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7O0FBRTFCLFFBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQ3ZCLFFBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0FBQ3BCLFFBQUksQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDOztBQUV4QixRQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuRSxRQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuRSxRQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuRSxRQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFbkUsUUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3BELFFBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3RDLFFBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQzs7QUFFdEIsUUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO0dBRXRDOztlQTlCa0IsTUFBTTs7V0FnQ25CLGtCQUFHOztBQUVQLFVBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFOUQsVUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtBQUN4QixZQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO09BQ3BDO0FBQ0QsVUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtBQUN4QixZQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO09BQ3BDO0FBQ0QsVUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtBQUN4QixZQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztPQUNuQztBQUNELFVBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7QUFDeEIsWUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7T0FDbkM7QUFDRCxVQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7QUFDeEMsWUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO09BQ2I7S0FFRjs7O1dBRUcsZ0JBQUc7QUFDTCxVQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFOztBQUV4QyxZQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDOztBQUV6QyxZQUFJLE1BQU0sRUFBRTtBQUNWLGdCQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDbEIsZ0JBQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNsQixnQkFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ2hCLGNBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDakIsTUFDSTtBQUNILGdCQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQzdELGNBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RCxnQkFBTSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7QUFDOUIsZ0JBQU0sQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7QUFDL0IsY0FBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNqQjtBQUNELFlBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzs7QUFFakUsWUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztPQUMxRDtLQUNGOzs7V0FFSyxnQkFBQyxHQUFHLEVBQUU7QUFDVixVQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxHQUFHLENBQUM7S0FDNUI7OztTQWhGa0IsTUFBTTtHQUFTLE1BQU0sQ0FBQyxNQUFNOztxQkFBNUIsTUFBTSIsImZpbGUiOiJDOi9Vc2Vycy9BbnRvbi9EZXNrdG9wL3Nob290ZXIvc3JjL3ByZWZhYnMvUGxheWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheWVyIGV4dGVuZHMgUGhhc2VyLlNwcml0ZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGdhbWUsIHgsIHksIGJ1bGxldHMpIHtcclxuXHJcbiAgICBzdXBlcihnYW1lLCB4LCB5LCAnaGVyb3NoaXAnLCAwKTtcclxuXHJcbiAgICB0aGlzLmdhbWUucGh5c2ljcy5lbmFibGUodGhpcywgUGhhc2VyLlBoeXNpY3MuQVJDQURFKTtcclxuICAgIHRoaXMuYm9keS5kcmFnLnggPSAxNTA7XHJcbiAgICB0aGlzLmJvZHkuZHJhZy55ID0gMTUwO1xyXG4gICAgdGhpcy5ib2R5LmNvbGxpZGVXb3JsZEJvdW5kcyA9IHRydWU7XHJcbiAgICBcclxuICAgIHRoaXMuc3BlZWQgPSAyMDA7XHJcbiAgICB0aGlzLmJ1bGxldFNwZWVkID0gMTUwMDtcclxuICAgIHRoaXMuYW5jaG9yLnNldFRvKC41LCAuNSk7XHJcblxyXG4gICAgdGhpcy5idWxsZXRzID0gYnVsbGV0cztcclxuICAgIHRoaXMuYnVsbGV0R2F0ZSA9IDA7XHJcbiAgICB0aGlzLnNob3RJbnRlcnZhbCA9IDUwMDtcclxuXHJcbiAgICB0aGlzLldfQnV0dG9uID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuVyk7XHJcbiAgICB0aGlzLkFfQnV0dG9uID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuQSk7XHJcbiAgICB0aGlzLlNfQnV0dG9uID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuUyk7XHJcbiAgICB0aGlzLkRfQnV0dG9uID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuRCk7XHJcblxyXG4gICAgdGhpcy5nYW1lLmxvYWQuYXVkaW8oJ3BldycsICdhc3NldHMvYXVkaW8vcGV3Lm1wMycpO1xyXG4gICAgdGhpcy5wZXcgPSB0aGlzLmdhbWUuYWRkLmF1ZGlvKCdwZXcnKTtcclxuICAgIHRoaXMucGV3LnZvbHVtZSA9IC4wNTtcclxuXHJcbiAgICB0aGlzLmhlYWx0aCA9IHsgY3VycmVudDogMSwgbWF4OiAxIH07XHJcblxyXG4gIH1cclxuXHJcbiAgdXBkYXRlKCkge1xyXG5cclxuICAgIHRoaXMucm90YXRpb24gPSB0aGlzLmdhbWUucGh5c2ljcy5hcmNhZGUuYW5nbGVUb1BvaW50ZXIodGhpcyk7XHJcblxyXG4gICAgaWYgKHRoaXMuV19CdXR0b24uaXNEb3duKSB7XHJcbiAgICAgIHRoaXMuYm9keS52ZWxvY2l0eS55ID0gLXRoaXMuc3BlZWQ7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5BX0J1dHRvbi5pc0Rvd24pIHtcclxuICAgICAgdGhpcy5ib2R5LnZlbG9jaXR5LnggPSAtdGhpcy5zcGVlZDtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLlNfQnV0dG9uLmlzRG93bikge1xyXG4gICAgICB0aGlzLmJvZHkudmVsb2NpdHkueSA9IHRoaXMuc3BlZWQ7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5EX0J1dHRvbi5pc0Rvd24pIHtcclxuICAgICAgdGhpcy5ib2R5LnZlbG9jaXR5LnggPSB0aGlzLnNwZWVkO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuZ2FtZS5pbnB1dC5hY3RpdmVQb2ludGVyLmlzRG93bikge1xyXG4gICAgICB0aGlzLmZpcmUoKTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBmaXJlKCkge1xyXG4gICAgaWYgKHRoaXMuZ2FtZS50aW1lLm5vdyA+IHRoaXMuYnVsbGV0R2F0ZSkge1xyXG4gICAgICBcclxuICAgICAgbGV0IGJ1bGxldCA9IHRoaXMuYnVsbGV0cy5nZXRGaXJzdERlYWQoKTtcclxuICAgICAgXHJcbiAgICAgIGlmIChidWxsZXQpIHtcclxuICAgICAgICBidWxsZXQueCA9IHRoaXMueDtcclxuICAgICAgICBidWxsZXQueSA9IHRoaXMueTtcclxuICAgICAgICBidWxsZXQucmV2aXZlKCk7XHJcbiAgICAgICAgdGhpcy5wZXcucGxheSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGJ1bGxldCA9IHRoaXMuYnVsbGV0cy5jcmVhdGUodGhpcy54LCB0aGlzLnksIFwicGxheWVyQnVsbGV0XCIpO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLmVuYWJsZShidWxsZXQsIFBoYXNlci5QaHlzaWNzLkFSQ0FERSk7XHJcbiAgICAgICAgYnVsbGV0Lm91dE9mQm91bmRzS2lsbCA9IHRydWU7XHJcbiAgICAgICAgYnVsbGV0LmNoZWNrV29ybGRCb3VuZHMgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucGV3LnBsYXkoKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmdhbWUucGh5c2ljcy5hcmNhZGUubW92ZVRvUG9pbnRlcihidWxsZXQsIHRoaXMuYnVsbGV0U3BlZWQpO1xyXG5cclxuICAgICAgdGhpcy5idWxsZXRHYXRlID0gdGhpcy5nYW1lLnRpbWUubm93ICsgdGhpcy5zaG90SW50ZXJ2YWw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkYW1hZ2UoYW10KSB7XHJcbiAgICB0aGlzLmhlYWx0aC5jdXJyZW50IC09IGFtdDtcclxuICB9XHJcblxyXG59Il19
},{}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Seeker = (function (_Phaser$Sprite) {
    _inherits(Seeker, _Phaser$Sprite);

    function Seeker(game, x, y, player, frame) {
        _classCallCheck(this, Seeker);

        _get(Object.getPrototypeOf(Seeker.prototype), 'constructor', this).call(this, game, x, y, 'seeker', player, frame);

        this.game.physics.enable(this, Phaser.Physics.ARCADE);
        this.outOfBoundsKill = true;
        this.anchor.setTo(.5, .5);
        this.scale.setTo(.2, .2);
        this.player = player;
    }

    _createClass(Seeker, [{
        key: 'update',
        value: function update() {

            this.game.physics.arcade.moveToObject(this, this.player);
            this.angle += 1;
        }
    }]);

    return Seeker;
})(Phaser.Sprite);

exports['default'] = Seeker;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6L1VzZXJzL0FudG9uL0Rlc2t0b3Avc2hvb3Rlci9zcmMvcHJlZmFicy9TZWVrZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7SUFBcUIsTUFBTTtjQUFOLE1BQU07O0FBRVosYUFGTSxNQUFNLENBRVgsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTs4QkFGdEIsTUFBTTs7QUFHbkIsbUNBSGEsTUFBTSw2Q0FHYixJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTs7QUFFM0MsWUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RELFlBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0FBQzVCLFlBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMxQixZQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDekIsWUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7S0FDeEI7O2lCQVZnQixNQUFNOztlQVlqQixrQkFBRzs7QUFFTCxnQkFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3pELGdCQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztTQUVuQjs7O1dBakJnQixNQUFNO0dBQVMsTUFBTSxDQUFDLE1BQU07O3FCQUE1QixNQUFNIiwiZmlsZSI6IkM6L1VzZXJzL0FudG9uL0Rlc2t0b3Avc2hvb3Rlci9zcmMvcHJlZmFicy9TZWVrZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWVrZXIgZXh0ZW5kcyBQaGFzZXIuU3ByaXRlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCB4LCB5LCBwbGF5ZXIsIGZyYW1lKSB7XHJcbiAgICAgICAgc3VwZXIoZ2FtZSwgeCwgeSwgJ3NlZWtlcicsIHBsYXllciwgZnJhbWUpO1xyXG5cclxuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5lbmFibGUodGhpcywgUGhhc2VyLlBoeXNpY3MuQVJDQURFKTtcclxuICAgICAgICB0aGlzLm91dE9mQm91bmRzS2lsbCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5hbmNob3Iuc2V0VG8oLjUsIC41KTtcclxuICAgICAgICB0aGlzLnNjYWxlLnNldFRvKC4yLCAuMik7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKCkge1xyXG5cclxuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5hcmNhZGUubW92ZVRvT2JqZWN0KHRoaXMsIHRoaXMucGxheWVyKTtcclxuICAgICAgICB0aGlzLmFuZ2xlICs9IDE7XHJcblxyXG4gICAgfVxyXG5cclxufSJdfQ==
},{}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Boot = (function () {
  function Boot() {
    _classCallCheck(this, Boot);
  }

  _createClass(Boot, [{
    key: 'preload',
    value: function preload() {
      this.load.image('preloader', 'assets/images/loading_bar.png');
    }
  }, {
    key: 'create',
    value: function create() {
      this.game.input.maxPointers = 1;
      this.game.state.start('preload');
    }
  }]);

  return Boot;
})();

exports['default'] = Boot;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6L1VzZXJzL0FudG9uL0Rlc2t0b3Avc2hvb3Rlci9zcmMvc3RhdGVzL0Jvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQixJQUFJO1dBQUosSUFBSTswQkFBSixJQUFJOzs7ZUFBSixJQUFJOztXQUVoQixtQkFBRztBQUNSLFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSwrQkFBK0IsQ0FBQyxDQUFDO0tBQy9EOzs7V0FFSyxrQkFBRztBQUNQLFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDaEMsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ2xDOzs7U0FUa0IsSUFBSTs7O3FCQUFKLElBQUkiLCJmaWxlIjoiQzovVXNlcnMvQW50b24vRGVza3RvcC9zaG9vdGVyL3NyYy9zdGF0ZXMvQm9vdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb3Qge1xyXG5cclxuICBwcmVsb2FkKCkge1xyXG4gICAgdGhpcy5sb2FkLmltYWdlKCdwcmVsb2FkZXInLCAnYXNzZXRzL2ltYWdlcy9sb2FkaW5nX2Jhci5wbmcnKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZSgpIHtcclxuICAgIHRoaXMuZ2FtZS5pbnB1dC5tYXhQb2ludGVycyA9IDE7XHJcbiAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ3ByZWxvYWQnKTtcclxuICB9XHJcblxyXG59Il19
},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _prefabsPlayerJs = require("../prefabs/Player.js");

var _prefabsPlayerJs2 = _interopRequireDefault(_prefabsPlayerJs);

var _prefabsBirdJs = require("../prefabs/Bird.js");

var _prefabsBirdJs2 = _interopRequireDefault(_prefabsBirdJs);

var _prefabsNumberBoxJs = require("../prefabs/NumberBox.js");

var _prefabsNumberBoxJs2 = _interopRequireDefault(_prefabsNumberBoxJs);

var _prefabsBoulderJs = require("../prefabs/Boulder.js");

var _prefabsBoulderJs2 = _interopRequireDefault(_prefabsBoulderJs);

var _prefabsSeekerJs = require("../prefabs/Seeker.js");

var _prefabsSeekerJs2 = _interopRequireDefault(_prefabsSeekerJs);

var Game = (function (_Phaser$State) {
    _inherits(Game, _Phaser$State);

    function Game() {
        _classCallCheck(this, Game);

        _get(Object.getPrototypeOf(Game.prototype), "constructor", this).call(this);
    }

    _createClass(Game, [{
        key: "create",
        value: function create() {
            this.birdSpawnChance = .01;
            this.boulderSpawnChance = .01;
            this.seekerSpawnChance = .01;
            this.score = 0;

            this.game.physics.startSystem(Phaser.Physics.ARCADE);
            this.bg = this.add.tileSprite(0, 0, 1024, 768, 'space');
            this.bullets = this.add.group();

            this.player = new _prefabsPlayerJs2["default"](this.game, this.game.width / 2, this.game.height / 2, this.bullets);
            this.game.add.existing(this.player);

            this.enemies = this.add.group();
            // this.enemyBullets = this.add.group();

            this.birdExplosions = this.game.add.emitter(0, 1, 100);
            this.birdExplosions.makeParticles('feather');
            this.birdExplosions.minParticleScale = 0.1;
            this.birdExplosions.maxParticleScale = 0.3;
            this.birdExplosions.setAlpha(1, .5, 2000);

            this.boulderExplosions = this.game.add.emitter(0, 1, 100);
            this.boulderExplosions.makeParticles('smallRock');
            this.boulderExplosions.minParticleScale = 0.1;
            this.boulderExplosions.maxParticleScale = 0.3;
            this.boulderExplosions.setAlpha(1, .5, 2000);

            this.scoreField = new _prefabsNumberBoxJs2["default"](this.game, "circle", 0);
            this.UILayer = this.add.group();
            this.UILayer.add(this.scoreField);

            this.game.load.audio('chicken', 'assets/audio/chicken.mp3');
            this.chicken = this.game.add.audio('chicken');
            this.chicken.volume = .05;

            this.game.load.audio('explosion', 'assets/audio/explosion.mp3');
            this.explosion = this.game.add.audio('explosion');
            this.explosion.volume = .25;

            /*
            this.music = this.game.add.audio('music');
            this.music.play('', 0, .5, true);
            */
        }
    }, {
        key: "update",
        value: function update() {

            this.bg.tilePosition.x -= .1;
            this.bg.tilePosition.y += .2;

            if (Math.random() < this.birdSpawnChance) {

                if (Math.random() <= .5) {
                    this.enemies.add(new _prefabsBirdJs2["default"](this.game, -100, Math.random() * this.game.height));
                } else {
                    this.enemies.add(new _prefabsBirdJs2["default"](this.game, this.game.width + 100 + Math.random() * 400, Math.random() * this.game.height));
                }
            }

            if (Math.random() < this.boulderSpawnChance) {
                var enemy = new _prefabsBoulderJs2["default"](this.game, Math.random() * 700, -100);
                this.enemies.add(enemy);
            }

            if (Math.random() < this.seekerSpawnChance) {
                var enemy = new _prefabsSeekerJs2["default"](this.game, Math.random() * 700, this.game.height + 100, this.player);
                this.enemies.add(enemy);
            }

            if (Math.random() < .0001) {
                this.birdSpawnChance += 0.05;
                this.boulderSpawnChance += 0.05;
            }

            this.physics.arcade.overlap(this.enemies, this.bullets, this.damageEnemy, null, this);
            this.physics.arcade.overlap(this.player, this.enemies, this.damagePlayer, null, this);
        }
    }, {
        key: "damageEnemy",
        value: function damageEnemy(enemy, bullet) {

            if (enemy.key === 'boulder') {
                this.explosion.play();

                this.boulderExplosions.x = enemy.x;
                this.boulderExplosions.y = enemy.y;

                this.boulderExplosions.explode(1000, 15);
            } else if (enemy.key === 'bird') {
                this.chicken.play();

                this.birdExplosions.x = enemy.x;
                this.birdExplosions.y = enemy.y;

                this.birdExplosions.explode(1000, 10);
            }

            enemy.kill();
            bullet.kill();

            this.score++;
            this.scoreField.setValue(this.score);
        }
    }, {
        key: "damagePlayer",
        value: function damagePlayer(playerRef, enemyRef) {
            this.player.damage(1);
            enemyRef.kill();

            if (this.player.health.current <= 0) {
                this.game.state.start('gameOver', 1, 1, this.score);
            }
        }
    }]);

    return Game;
})(Phaser.State);

exports["default"] = Game;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../prefabs/Bird.js":2,"../prefabs/Boulder.js":3,"../prefabs/NumberBox.js":5,"../prefabs/Player.js":6,"../prefabs/Seeker.js":7}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GameOver = (function (_Phaser$State) {
    _inherits(GameOver, _Phaser$State);

    function GameOver() {
        _classCallCheck(this, GameOver);

        _get(Object.getPrototypeOf(GameOver.prototype), "constructor", this).apply(this, arguments);
    }

    _createClass(GameOver, [{
        key: "init",
        value: function init(score) {
            this.score = score;
        }
    }, {
        key: "create",
        value: function create() {
            this.bg = this.add.tileSprite(0, 0, 800, 600, 'redSpace');

            var gameOverstyle = { font: "100px Arial", align: "center", fill: "#fff" };
            var gameOverText = this.game.add.text(this.game.world.centerX, this.game.world.centerY - 40, "Game Over!", gameOverstyle);
            gameOverText.anchor.set(0.5);

            var scoreStyle = { font: "50px Arial", align: "center", fill: "#fff" };
            var scoreText = this.game.add.text(this.game.world.centerX, this.game.world.centerY + 50, "Your Score: " + this.score, scoreStyle);
            scoreText.anchor.set(0.5);

            var clickStyle = { font: "50px Arial", align: "center", fill: "#fff" };
            var clickText = this.game.add.text(this.game.world.centerX, this.game.world.centerY + 230, "Click to get to menu", clickStyle);
            clickText.anchor.set(0.5);
        }
    }, {
        key: "update",
        value: function update() {
            if (this.game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {
                this.game.state.start('startScreen');
            }
        }
    }]);

    return GameOver;
})(Phaser.State);

exports["default"] = GameOver;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6L1VzZXJzL0FudG9uL0Rlc2t0b3Avc2hvb3Rlci9zcmMvc3RhdGVzL0dhbWVPdmVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0lBQXFCLFFBQVE7Y0FBUixRQUFROzthQUFSLFFBQVE7OEJBQVIsUUFBUTs7bUNBQVIsUUFBUTs7O2lCQUFSLFFBQVE7O2VBRXJCLGNBQUMsS0FBSyxFQUFFO0FBQ1IsZ0JBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQ3RCOzs7ZUFFSyxrQkFBRztBQUNMLGdCQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQzs7QUFFMUQsZ0JBQUksYUFBYSxHQUFHLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUMzRSxnQkFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxFQUFFLFlBQVksRUFBRSxhQUFhLENBQUMsQ0FBQztBQUMxSCx3QkFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7O0FBRTdCLGdCQUFJLFVBQVUsR0FBRyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDdkUsZ0JBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsRUFBRSxjQUFjLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNuSSxxQkFBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7O0FBRTFCLGdCQUFJLFVBQVUsR0FBRyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDdkUsZ0JBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRSxzQkFBc0IsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMvSCxxQkFBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7U0FFN0I7OztlQUVLLGtCQUFHO0FBQ0wsZ0JBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQzFELG9CQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDeEM7U0FDSjs7O1dBM0JnQixRQUFRO0dBQVMsTUFBTSxDQUFDLEtBQUs7O3FCQUE3QixRQUFRIiwiZmlsZSI6IkM6L1VzZXJzL0FudG9uL0Rlc2t0b3Avc2hvb3Rlci9zcmMvc3RhdGVzL0dhbWVPdmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZU92ZXIgZXh0ZW5kcyBQaGFzZXIuU3RhdGUge1xyXG4gICAgXHJcbiAgICBpbml0KHNjb3JlKSB7XHJcbiAgICAgICAgdGhpcy5zY29yZSA9IHNjb3JlO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZSgpIHtcclxuICAgICAgICB0aGlzLmJnID0gdGhpcy5hZGQudGlsZVNwcml0ZSgwLCAwLCA4MDAsIDYwMCwgJ3JlZFNwYWNlJyk7XHJcblxyXG4gICAgICAgIGxldCBnYW1lT3ZlcnN0eWxlID0geyBmb250OiBcIjEwMHB4IEFyaWFsXCIsIGFsaWduOiBcImNlbnRlclwiLCBmaWxsOiBcIiNmZmZcIiB9O1xyXG4gICAgICAgIGxldCBnYW1lT3ZlclRleHQgPSB0aGlzLmdhbWUuYWRkLnRleHQodGhpcy5nYW1lLndvcmxkLmNlbnRlclgsIHRoaXMuZ2FtZS53b3JsZC5jZW50ZXJZIC0gNDAsIFwiR2FtZSBPdmVyIVwiLCBnYW1lT3ZlcnN0eWxlKTtcclxuICAgICAgICBnYW1lT3ZlclRleHQuYW5jaG9yLnNldCgwLjUpO1xyXG5cclxuICAgICAgICBsZXQgc2NvcmVTdHlsZSA9IHsgZm9udDogXCI1MHB4IEFyaWFsXCIsIGFsaWduOiBcImNlbnRlclwiLCBmaWxsOiBcIiNmZmZcIiB9O1xyXG4gICAgICAgIGxldCBzY29yZVRleHQgPSB0aGlzLmdhbWUuYWRkLnRleHQodGhpcy5nYW1lLndvcmxkLmNlbnRlclgsIHRoaXMuZ2FtZS53b3JsZC5jZW50ZXJZICsgNTAsIFwiWW91ciBTY29yZTogXCIgKyB0aGlzLnNjb3JlLCBzY29yZVN0eWxlKTtcclxuICAgICAgICBzY29yZVRleHQuYW5jaG9yLnNldCgwLjUpO1xyXG5cclxuICAgICAgICBsZXQgY2xpY2tTdHlsZSA9IHsgZm9udDogXCI1MHB4IEFyaWFsXCIsIGFsaWduOiBcImNlbnRlclwiLCBmaWxsOiBcIiNmZmZcIiB9O1xyXG4gICAgICAgIGxldCBjbGlja1RleHQgPSB0aGlzLmdhbWUuYWRkLnRleHQodGhpcy5nYW1lLndvcmxkLmNlbnRlclgsIHRoaXMuZ2FtZS53b3JsZC5jZW50ZXJZICsgMjMwLCBcIkNsaWNrIHRvIGdldCB0byBtZW51XCIsIGNsaWNrU3R5bGUpO1xyXG4gICAgICAgIGNsaWNrVGV4dC5hbmNob3Iuc2V0KDAuNSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSgpIHtcclxuICAgICAgICBpZih0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuaXNEb3duKFBoYXNlci5LZXlib2FyZC5TUEFDRUJBUikpIHtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdzdGFydFNjcmVlbicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iXX0=
},{}],11:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Preload = (function () {
    function Preload() {
        _classCallCheck(this, Preload);

        this.asset = null;
        this.ready = false;
    }

    _createClass(Preload, [{
        key: 'preload',
        value: function preload() {
            this.load.image('loading_bg', 'assets/images/loading_bg.jpg');
        }
    }, {
        key: 'create',
        value: function create() {

            //background for game
            this.add.sprite(0, 0, "loading_bg");

            this.asset = this.add.sprite(this.game.width / 2, this.game.height / 2, 'preloader');
            this.asset.anchor.setTo(0.5, 0.5);

            this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
            this.load.setPreloadSprite(this.asset);

            //do all your loading here
            //this.load.image('player', 'assets/images/player.png'); //width and height of sprite

            this.load.image('startButton', 'assets/images/startButton.png');

            this.load.image('bg', 'assets/images/bg.jpg');
            this.load.image('space', 'assets/images/space.png');
            this.load.image('playerBullet', 'assets/images/playerBullet.png');
            this.load.image('enemyBullet', 'assets/images/playerBullet.png');

            this.load.image('heroship', 'assets/images/heroship.png');

            this.load.spritesheet('bird', 'assets/images/bird.png', 184, 169);

            this.load.image('circle', 'assets/images/circle.png');

            this.load.image('feather', 'assets/images/feather.png');

            this.load.audio('pew', 'assets/audio/pew2.mp3');
            this.load.audio('chicken', 'assets/audio/chicken.mp3');

            this.load.audio('music', 'assets/audio/HorribleSong.mp3');
            this.load.audio('explosion', 'assets/audio/explosion.mp3');

            this.load.image('gameOverScreen', 'assets/images/GameOverScreen.png');

            this.load.image('boulder', 'assets/images/boulder.png');
            this.load.image('smallRock', 'assets/images/smallRock.png');

            this.load.image('seeker', 'assets/images/seeker.png');

            this.load.image('redSpace', 'assets/images/redSpace.jpg');

            //staaaart load
            this.load.start();
        }
    }, {
        key: 'update',
        value: function update() {

            if (this.ready) {
                this.game.state.start('startScreen');
            }
        }
    }, {
        key: 'onLoadComplete',
        value: function onLoadComplete() {
            this.ready = true;
        }
    }]);

    return Preload;
})();

exports['default'] = Preload;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6L1VzZXJzL0FudG9uL0Rlc2t0b3Avc2hvb3Rlci9zcmMvc3RhdGVzL1ByZWxvYWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQixPQUFPO0FBRWYsYUFGUSxPQUFPLEdBRVo7OEJBRkssT0FBTzs7QUFHeEIsWUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDbEIsWUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7S0FDcEI7O2lCQUxrQixPQUFPOztlQU9uQixtQkFBRztBQUNSLGdCQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsOEJBQThCLENBQUMsQ0FBQztTQUMvRDs7O2VBRUssa0JBQUc7OztBQUdQLGdCQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDOztBQUVuQyxnQkFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ2hGLGdCQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDOztBQUVsQyxnQkFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUQsZ0JBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7OztBQUt2QyxnQkFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLCtCQUErQixDQUFDLENBQUM7O0FBRWhFLGdCQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztBQUM5QyxnQkFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLHlCQUF5QixDQUFDLENBQUM7QUFDcEQsZ0JBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQ2xFLGdCQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsZ0NBQWdDLENBQUMsQ0FBQzs7QUFFakUsZ0JBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDOztBQUUxRCxnQkFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLHdCQUF3QixFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQzs7QUFFbEUsZ0JBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDOztBQUV0RCxnQkFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLDJCQUEyQixDQUFDLENBQUM7O0FBRXhELGdCQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztBQUNoRCxnQkFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLDBCQUEwQixDQUFDLENBQUM7O0FBRXZELGdCQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsK0JBQStCLENBQUMsQ0FBQztBQUMxRCxnQkFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLDRCQUE0QixDQUFDLENBQUM7O0FBRTNELGdCQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxrQ0FBa0MsQ0FBQyxDQUFDOztBQUV0RSxnQkFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLDJCQUEyQixDQUFDLENBQUM7QUFDeEQsZ0JBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSw2QkFBNkIsQ0FBQyxDQUFDOztBQUU1RCxnQkFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLDBCQUEwQixDQUFDLENBQUM7O0FBRXRELGdCQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsNEJBQTRCLENBQUMsQ0FBQzs7O0FBRzFELGdCQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ25COzs7ZUFFSyxrQkFBRzs7QUFFUCxnQkFBRyxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQ2Isb0JBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUN0QztTQUVGOzs7ZUFFYSwwQkFBRztBQUNmLGdCQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztTQUNuQjs7O1dBckVrQixPQUFPOzs7cUJBQVAsT0FBTyIsImZpbGUiOiJDOi9Vc2Vycy9BbnRvbi9EZXNrdG9wL3Nob290ZXIvc3JjL3N0YXRlcy9QcmVsb2FkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlbG9hZCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5hc3NldCA9IG51bGw7XHJcbiAgICB0aGlzLnJlYWR5ID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBwcmVsb2FkKCkge1xyXG4gICAgdGhpcy5sb2FkLmltYWdlKCdsb2FkaW5nX2JnJywgJ2Fzc2V0cy9pbWFnZXMvbG9hZGluZ19iZy5qcGcnKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZSgpIHtcclxuXHJcbiAgICAvL2JhY2tncm91bmQgZm9yIGdhbWVcclxuICAgIHRoaXMuYWRkLnNwcml0ZSgwLDAsIFwibG9hZGluZ19iZ1wiKTtcclxuXHJcbiAgICB0aGlzLmFzc2V0ID0gdGhpcy5hZGQuc3ByaXRlKHRoaXMuZ2FtZS53aWR0aC8yLHRoaXMuZ2FtZS5oZWlnaHQvMiwgJ3ByZWxvYWRlcicpO1xyXG4gICAgdGhpcy5hc3NldC5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xyXG5cclxuICAgIHRoaXMubG9hZC5vbkxvYWRDb21wbGV0ZS5hZGRPbmNlKHRoaXMub25Mb2FkQ29tcGxldGUsIHRoaXMpO1xyXG4gICAgdGhpcy5sb2FkLnNldFByZWxvYWRTcHJpdGUodGhpcy5hc3NldCk7XHJcblxyXG4gICAgLy9kbyBhbGwgeW91ciBsb2FkaW5nIGhlcmVcclxuICAgIC8vdGhpcy5sb2FkLmltYWdlKCdwbGF5ZXInLCAnYXNzZXRzL2ltYWdlcy9wbGF5ZXIucG5nJyk7IC8vd2lkdGggYW5kIGhlaWdodCBvZiBzcHJpdGVcclxuXHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ3N0YXJ0QnV0dG9uJywgJ2Fzc2V0cy9pbWFnZXMvc3RhcnRCdXR0b24ucG5nJyk7XHJcblxyXG4gICAgdGhpcy5sb2FkLmltYWdlKCdiZycsICdhc3NldHMvaW1hZ2VzL2JnLmpwZycpO1xyXG4gICAgdGhpcy5sb2FkLmltYWdlKCdzcGFjZScsICdhc3NldHMvaW1hZ2VzL3NwYWNlLnBuZycpO1xyXG4gICAgdGhpcy5sb2FkLmltYWdlKCdwbGF5ZXJCdWxsZXQnLCAnYXNzZXRzL2ltYWdlcy9wbGF5ZXJCdWxsZXQucG5nJyk7XHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ2VuZW15QnVsbGV0JywgJ2Fzc2V0cy9pbWFnZXMvcGxheWVyQnVsbGV0LnBuZycpO1xyXG5cclxuICAgIHRoaXMubG9hZC5pbWFnZSgnaGVyb3NoaXAnLCAnYXNzZXRzL2ltYWdlcy9oZXJvc2hpcC5wbmcnKTtcclxuXHJcbiAgICB0aGlzLmxvYWQuc3ByaXRlc2hlZXQoJ2JpcmQnLCAnYXNzZXRzL2ltYWdlcy9iaXJkLnBuZycsIDE4NCwgMTY5KTtcclxuXHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ2NpcmNsZScsICdhc3NldHMvaW1hZ2VzL2NpcmNsZS5wbmcnKTtcclxuXHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ2ZlYXRoZXInLCAnYXNzZXRzL2ltYWdlcy9mZWF0aGVyLnBuZycpO1xyXG5cclxuICAgIHRoaXMubG9hZC5hdWRpbygncGV3JywgJ2Fzc2V0cy9hdWRpby9wZXcyLm1wMycpO1xyXG4gICAgdGhpcy5sb2FkLmF1ZGlvKCdjaGlja2VuJywgJ2Fzc2V0cy9hdWRpby9jaGlja2VuLm1wMycpO1xyXG5cclxuICAgIHRoaXMubG9hZC5hdWRpbygnbXVzaWMnLCAnYXNzZXRzL2F1ZGlvL0hvcnJpYmxlU29uZy5tcDMnKTtcclxuICAgIHRoaXMubG9hZC5hdWRpbygnZXhwbG9zaW9uJywgJ2Fzc2V0cy9hdWRpby9leHBsb3Npb24ubXAzJyk7XHJcblxyXG4gICAgdGhpcy5sb2FkLmltYWdlKCdnYW1lT3ZlclNjcmVlbicsICdhc3NldHMvaW1hZ2VzL0dhbWVPdmVyU2NyZWVuLnBuZycpO1xyXG5cclxuICAgIHRoaXMubG9hZC5pbWFnZSgnYm91bGRlcicsICdhc3NldHMvaW1hZ2VzL2JvdWxkZXIucG5nJyk7XHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ3NtYWxsUm9jaycsICdhc3NldHMvaW1hZ2VzL3NtYWxsUm9jay5wbmcnKTtcclxuXHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ3NlZWtlcicsICdhc3NldHMvaW1hZ2VzL3NlZWtlci5wbmcnKTtcclxuXHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ3JlZFNwYWNlJywgJ2Fzc2V0cy9pbWFnZXMvcmVkU3BhY2UuanBnJyk7XHJcblxyXG4gICAgLy9zdGFhYWFydCBsb2FkXHJcbiAgICB0aGlzLmxvYWQuc3RhcnQoKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZSgpIHtcclxuXHJcbiAgICBpZih0aGlzLnJlYWR5KSB7XHJcbiAgICAgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnc3RhcnRTY3JlZW4nKTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBvbkxvYWRDb21wbGV0ZSgpIHtcclxuICAgIHRoaXMucmVhZHkgPSB0cnVlO1xyXG4gIH1cclxuXHJcbn0iXX0=
},{}],12:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _prefabsMenuJs = require("../prefabs/Menu.js");

var _prefabsMenuJs2 = _interopRequireDefault(_prefabsMenuJs);

var StartScreen = (function (_Phaser$State) {
    _inherits(StartScreen, _Phaser$State);

    function StartScreen() {
        _classCallCheck(this, StartScreen);

        _get(Object.getPrototypeOf(StartScreen.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(StartScreen, [{
        key: 'create',
        value: function create() {
            var _this = this;

            this.bg = this.add.tileSprite(0, 0, 1024, 768, 'space');
            // this.menu = new Menu(this.game);

            /*
            this.button = this.game.add.button(this.game.width / 2 - 50, this.game.height / 3 - 30, 'startButton', () => {
                this.game.state.start('game');
            }, this, 1, 1, 1);
            */
            this.button = this.game.add.button(this.game.world.centerX, this.game.height / 3, 'startButton', function () {
                _this.game.state.start('game');
            }, this, 1, 1, 1);
            this.button.anchor.set(0.5);
            // this.button.scale.setTo(1.5);
        }
    }, {
        key: 'update',
        value: function update() {

            this.bg.tilePosition.y -= .5;

            if (this.game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {
                this.game.state.start('game');
            }
        }
    }]);

    return StartScreen;
})(Phaser.State);

exports['default'] = StartScreen;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6L1VzZXJzL0FudG9uL0Rlc2t0b3Avc2hvb3Rlci9zcmMvc3RhdGVzL1N0YXJ0U2NyZWVuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7NkJBQ2lCLG9CQUFvQjs7OztJQUVoQixXQUFXO2NBQVgsV0FBVzs7YUFBWCxXQUFXOzhCQUFYLFdBQVc7O21DQUFYLFdBQVc7OztpQkFBWCxXQUFXOztlQUV0QixrQkFBRzs7O0FBQ0wsZ0JBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDOzs7Ozs7OztBQVF6RCxnQkFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxhQUFhLEVBQUUsWUFBTTtBQUNuRyxzQkFBSyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNoQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2xCLGdCQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7O1NBRS9COzs7ZUFFSyxrQkFBRzs7QUFFTCxnQkFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7QUFFN0IsZ0JBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQzNELG9CQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDakM7U0FDSjs7O1dBekJnQixXQUFXO0dBQVMsTUFBTSxDQUFDLEtBQUs7O3FCQUFoQyxXQUFXIiwiZmlsZSI6IkM6L1VzZXJzL0FudG9uL0Rlc2t0b3Avc2hvb3Rlci9zcmMvc3RhdGVzL1N0YXJ0U2NyZWVuLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCBNZW51IGZyb20gXCIuLi9wcmVmYWJzL01lbnUuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YXJ0U2NyZWVuIGV4dGVuZHMgUGhhc2VyLlN0YXRlIHtcclxuXHJcbiAgICBjcmVhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5iZyA9IHRoaXMuYWRkLnRpbGVTcHJpdGUoMCwgMCwgMTAyNCwgNzY4LCAnc3BhY2UnKTtcclxuICAgICAgICAvLyB0aGlzLm1lbnUgPSBuZXcgTWVudSh0aGlzLmdhbWUpO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgIHRoaXMuYnV0dG9uID0gdGhpcy5nYW1lLmFkZC5idXR0b24odGhpcy5nYW1lLndpZHRoIC8gMiAtIDUwLCB0aGlzLmdhbWUuaGVpZ2h0IC8gMyAtIDMwLCAnc3RhcnRCdXR0b24nLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnZ2FtZScpO1xyXG4gICAgICAgIH0sIHRoaXMsIDEsIDEsIDEpO1xyXG4gICAgICAgICovXHJcbiAgICAgICB0aGlzLmJ1dHRvbiA9IHRoaXMuZ2FtZS5hZGQuYnV0dG9uKHRoaXMuZ2FtZS53b3JsZC5jZW50ZXJYLCB0aGlzLmdhbWUuaGVpZ2h0IC8gMywgJ3N0YXJ0QnV0dG9uJywgKCkgPT4ge1xyXG4gICAgICAgICAgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnZ2FtZScpO1xyXG4gICAgICAgIH0sIHRoaXMsIDEsIDEsIDEpO1xyXG4gICAgICAgIHRoaXMuYnV0dG9uLmFuY2hvci5zZXQoMC41KTtcclxuICAgICAgICAvLyB0aGlzLmJ1dHRvbi5zY2FsZS5zZXRUbygxLjUpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSgpIHtcclxuXHJcbiAgICAgICAgdGhpcy5iZy50aWxlUG9zaXRpb24ueSAtPSAuNTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5pc0Rvd24oUGhhc2VyLktleWJvYXJkLlNQQUNFQkFSKSkge1xyXG4gICAgICAgICAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ2dhbWUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59Il19
},{"../prefabs/Menu.js":4}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
